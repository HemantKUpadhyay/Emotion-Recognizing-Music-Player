// CPP to find the count subset having product 
// less than k 
#include <bits/stdc++.h> 
using namespace std; 

bool coprime(int a, int b) 
{    
    return (__gcd(a, b) == 1); 
} 

int numOfPairs(int arr[], int n) 
{  
      
    int count = 0;  
    for (int i = 0; i < n - 1; i++)  
        for (int j = i + 1; j < n; j++) 
            if (coprime(arr[i], arr[j])) 
                count++; 
                  
    return count; 
}


int findSubset(long long int arr[], int n) 
{ 
	// declare four vector for dividing array into 
	// two halves and storing product value of 
	// possible subsets for them 
	vector<long long int> vect1, vect2, subset1, subset2; 

	// ignore element greater than k and divide 
	// array into 2 halves 
	for (int i = 0; i < n; i++) { 

		// ignore element if greater than k 
		// if (arr[i] > k) 
		// 	continue; 
		if (i <= n / 2) 
			vect1.push_back(arr[i]); 
		else
			vect2.push_back(arr[i]); 
	} 

	// generate all subsets for 1st half (vect1) 
	for (int i = 0; i < (1 << vect1.size()); i++) { 
		long long value = 1; 
		for (int j = 0; j < vect1.size(); j++) { 
			if (i & (1 << j)) 
				value *= vect1[j]; 
		} 

		// push only in case subset product is less 
		// than equal to k 
		// if (value <= k) 
			subset1.push_back(value); 
	} 

	// generate all subsets for 2nd half (vect2) 
	for (int i = 0; i < (1 << vect2.size()); i++) { 
		long long value = 1; 
		for (int j = 0; j < vect2.size(); j++) { 
			if (i & (1 << j)) 
				value *= vect2[j]; 
		} 

		// push only in case subset product is 
		// less than equal to k 
		// if (value <= k) 
			subset2.push_back(value); 
	} 

	// sort subset2 
	// sort(subset2.begin(), subset2.end()); 

	long long count = 0, size1=subset1.size(),size2=subset2.size(); 
	// for (int i = 0; i < subset1.size(); i++) 
	// 	count += upper_bound(subset2.begin(), subset2.end(), 
	// 					(k / subset1[i])) - subset2.begin(); 
	
	long long size=size1+size2;
	long long arr1[size];
	for(int i=0;i<size;i++)
	{
		if(i<size1)
		{
			arr1[i]=subset1[i];
		}
		else
		{
			arr1[i]=subset[i-size2];
		}
	}
	
	count=numOfPairs(arr1,size);
	
	

	// for null subset decrement the value of count 
	count-=2; 

	// return count 
	return count; 
} 

// driver program 
int main() 
{ 
	long long int arr[] = { 2,3,4 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	// long long int k = 25; 
	cout << findSubset(arr, n); 
	return 0; 
} 
